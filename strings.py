#### Задание 7.1
def task_1():

    #Дана строка. В каждой новой строке выведите её
    #подстроки, согласно заданию:

    str = "Abrakadabra"
    print("\nСтрока: ", str)
    print("Третий символ строки: ", str[2])
    print("Предпоследний символ: ", str[-2])
    print("Первые 5 символов: ", str[0:5])
    print("Вся строка, кроме последний двух: ", str[0:-2])
    print("Символы с четным индексом: ", str[::2])
    print("Символы с нечетным индексом: ", str[1::2])
    print("Символы в обратном порядке: ", str[::-1])
    print("Символы через один, в обратном порядке: ",str[::-2])
    print("Длинна строки: ", len(str), "\n")
    taskChoice()

#### Задание 7.2
def task_2():

    #Напишите программу, которая отсекает всю часть строки
    #после первого слова.

    str = "Once upon a time"
    print("\nСтрока: ", str)
    newStr = str.split()
    print("Первое слово: ", newStr[0], "\n")
    taskChoice()

#### Задание 7.3
def task_3():

    #Дана строка, состоящая из слов, разделенных пробелами.
    #Определите, сколько в ней слов. Используйте для решения
    #задачи метод count. Выведите длину данной строки.

    str = "In the hole in the ground there lived a hobbit"
    print("\nСтрока: ", str)
    strCount = str.count(' ') + 1
    print("Всего слов: ", strCount, "\n")
    taskChoice()

#### Задание 7.4
def task_4():

    #Ввести с клавиатуры символьную строку и определить,
    #сколько в ней слов. Словом считается последовательность
    #непробельных символов, отделенная с двух сторон
    #пробелами (или стоящая с краю строки). Слова могут быть
    #разделены несколькими пробелами, в начале и в конце
    #строки тоже могут быть пробелы.

    str = input("\nВведите символьную строку: ").split()
    print("Всего слов: ", len(str), "\n")
    taskChoice()

#### Задание 7.5
def task_5():

    #Ввести с клавиатуры символьную строку и найти самое
    #длинное слово и его длину. Словом считается
    #последовательности непробельных символов, отделенная с
    #двух сторон пробелами (или стоящая с краю строки). Слова
    #могут быть разделены несколькими пробелами, в начале и
    #в конце строки тоже могут быть пробелы.

    str = input("\nВведите символьную строку: ").split()
    print(max(str, key=len))
    taskChoice()

#### Задание 7.6
def task_6():

    #Дана строка, состоящая ровно из двух слов, разделенных
    #пробелом. Переставьте эти слова местами. Результат
    #запишите в строку и выведите получившуюся строку.
        #При решении этой задачи не стоит пользоваться
        #циклами и инструкцией if

    str = "Hello, world!"
    print("\nСтрока: ", str)
    firstStr = str[:str.find(" ")]
    secondStr = str[str.find(" "):]
    print("Переставленные слова: ", secondStr, firstStr, "\n")
    taskChoice()

#### Задание 7.7
def task_7():

    #Дана строка. Разрежьте ее на две равные части (если длина
    #строки — четная, а если длина строки нечетная, то длина
    #первой части должна быть на один символ больше).
    #Переставьте эти две части местами, результат запишите в
    #новую строку и выведите на экран.
        #При решении этой задачи не стоит пользоваться
        #инструкцией if

    str = "Hello"
    print("\nСтрока: ", str)
    print(str[(len(str) + 1) // 2:] + str[:(len(str) + 1) // 2], "\n")
    taskChoice()

#### Задание 7.8
def task_8():

    #Дана строка. Если в этой строке буква f встречается только
    #один раз, выведите её индекс. Если она встречается два и
    #более раз, выведите индекс её первого и последнего
    #появления. Если буква f в данной строке не встречается,
    #ничего не выводите.
        #При решении этой задачи не стоит использовать циклы.

    str = input("\nВведите строку: ").lower()
    firstEntry = str.find('f')
    lastEntry = str.rfind('f')
    if firstEntry == -1:
        print("F отстутвует.", "\n")
    elif firstEntry == lastEntry:
        print(firstEntry, "\n")
    else:
        print(firstEntry, lastEntry, "\n")
    taskChoice()

#### Задание 7.9
def task_9():

    #Дана строка. Найдите в этой строке второе вхождение
    #буквы f, и выведите индекс этого вхождения. Если буква f в
    #данной строке встречается только один раз, выведите
    #число -1, а если не встречается ни разу, выведите число -2.

    str = input("\nВведите строку: ").lower()
    if str.count("f") == -1:
        print("-1", "\n")
    elif str.count("f") < 1:
        print("-2", "\n")
    else:
        print(str.find('f', str.find('f') + 1), "\n")
    taskChoice()

#### Задание 7.10
def task_10():

    #Дана строка, в которой буква h встречается минимум два
    #раза. Удалите из этой строки первое и последнее
    #вхождение буквы h, а также все символы, находящиеся между ними.

    str = input("\nВведите строку: ").lower()
    str = str[:str.find('h')] + str[str.rfind('h') + 1:]
    print("Очищенная строка: ", str, "\n")
    taskChoice()

#### Задание 7.11
def task_11():

    #Дана строка, в которой буква h встречается как минимум
    #два раза. Разверните последовательность символов,
    #заключенную между первым и последним появлением
    #буквы h, в противоположном порядке.

    str = input("\nВведите строку: ").lower()
    partOne = str[:str.find('h')]
    partTwo = str[str.find('h'):str.rfind('h') + 1]
    partThree = str[str.rfind('h') + 1:]
    newStr = partOne + partTwo[::-1] + partThree
    print("Новая строка: ", newStr, "\n")
    taskChoice()

#### Задание 7.12
def task_12():

    #Дана строка. Замените в этой строке все цифры 1 на слово

    str = input("\nВведите строку: ").replace('1', 'one')
    print("Новая строка: ", str, "\n")
    taskChoice()

#### Задание 7.13
def task_13():

    #Дана строка. Удалите из этой строки все символы @.

    str = input("\nВведите строку: ").replace('@', '')
    print("Новая строка: ", str, "\n")
    taskChoice()

#### Задание 7.14
def task_14():

    #Дана строка. Замениnе в этой строке все появления буквы
    #h на букву H, кроме первого и последнего вхождения.

    str = input("\nВведите строку: ")
    partOne = str[:str.find('h') + 1]
    partTwo = str[str.find('h') + 1:str.rfind('h')]
    partThree = str[str.rfind('h'):]
    newStr = partOne + partTwo.replace('h', 'H') + partThree
    print("Новая строка: ", newStr, "\n")
    taskChoice()

#### Задание 7.15
def task_15():

    #Дана строка. Удалите из нее все символы,
    #чьи индексы делятся на 3.

    str = input("\nВведите строку: ")
    newStr = ""
    for i in range(len(str)):
        if i % 3 != 0:
            newStr = newStr + str[i]
    print("Новая строка: ", newStr, "\n")
    taskChoice()

#### Задание 7.16
def task_16():

    #Ввести с клавиатуры в одну строку фамилию, имя и
    #отчество, разделив их пробелом.
    #Вывести фамилию и инициалы.

    str = input("\nВведите ФИО: ").split()
    lastName, name, otchestvo = str[0], str[1], str[2]
    print("Фамилия и инициалы: ", lastName, name[0:1] + "." + otchestvo[0:1] + ".", "\n")
    taskChoice()

#### Задание 7.17
def task_17():

    #Дан адрес файла. Программа должна разбирать его на
    #части, разделенные знаком /. Каждую часть
    #выводить с отдельной строки.

    str = input("\nВведите адрес файла: ").split('/')
    print("Разбитый адрес: \n")
    for i in range(len(str)):
        print(str[i])
    print("\n")
    taskChoice()

#### Задание 7.18
def task_18():

    #Дан URL-адрес. Разберете его на составляющие по примеру.

    str = input("\nВведите URL-адрес: ")
    data = ["Protocol", "Domain", "Port", "FileName", "FileType"]
    data[0] += ": " + str[:str.find(":")]
    data[1] += ": " + str[str.find("/") + 2:str.rfind(":")]
    data[2] += ": " + str[str.rfind(":") + 1:str.rfind("/")]
    data[3] += ": " + str[str.rfind("/") + 1:str.rfind(".")]
    data[4] += ": " + str[str.rfind(".") + 1:]
    for i in range(len(data)):
        print(data[i])
    taskChoice()

#### Задание 7.19
def task_19():

    #Напишите программу, которая заменяет
    #расширение файла на заданное новое расширение.

    str = input("\nВведите имя файла: ")
    ext = input("\nВведите новое расширение: ")
    tmp = str[:str.rfind(".")]
    print(tmp + "." + ext)
    taskChoice()

#### Задание 7.20
def task_20():

    #Напишите функцию, которая заменяет во всей строке все
    #римские числа на соответствующие десятичные числа.

    print("Тут что-то должно быть ¯\_(ツ)_/¯")
    taskChoice()

#### Задание 7.21
def task_21():

    #Напишите программу, которая вычисляет сумму трех чисел,
    #введенную в форме символьной строки. Все числа целые.

    str = input("\nВведите три числа и '+' между ними: ")
    print(sum(map(int,str.split('+'))))
    taskChoice()

#### Задание 7.22
def task_22():

    #Напишите программу, которая вычисляет выражение,
    #состоящее из трех чисел и двух знаков (допускаются
    #только знаки «+» или «–»). Выражение вводится как
    #символьная строка, все числа целые 10+10-5

    print("Тут что-то должно быть ¯\_(ツ)_/¯")
    taskChoice()

#### Задание 7.23
def task_23():

    #Напишите программу, которая вычисляет выражение,
    #состоящее из трех чисел и двух знаков (допускаются знаки
    #«+», «–», «*» и «/»). Выражение вводится как символьная
    #строка, все числа целые. Операция «/» выполняется как
    #целочисленное деление.

    print("Тут что-то должно быть ¯\_(ツ)_/¯")
    taskChoice()

#### Задание 7.24
def task_24():

    #Напишите программу, которая вычисляет выражение,
    #состоящее из трех чисел и двух знаков (допускаются знаки
    #«+», «–», «*» и «/») и круглых скобок. Выражение вводится
    #как символьная строка, все числа целые. Операция «/»
    #выполняется как целочисленное деление (div).

    print("Тут что-то должно быть ¯\_(ツ)_/¯")
    taskChoice()

#### Задание 7.25
def task_25():

    #В алфавите языке племени «тумба-юмба» четыре буквы:
    #«Ы», «Ш», «Ч» и «О». Нужно вывести на экран все
    #возможные слова, состоящие из K букв, в которых вторая
    #буква «Ы». Подсчитайте количество таких слов.

    k = int(input('K > '))
    alphabet = ['Ы', 'Ш', 'Ч', 'О']
    res = ['ЫЫ', 'ШЫ', 'ЧЫ', 'ОЫ']
    def extend(d: dict, alphabet: dict) -> dict:
      return [item + a for item in d for a in alphabet if type(a) == type('a')]
    if k > 2:
      for i in range(k-2):
        res = extend(res, alphabet)
    print(res)
    print('Всего слов: ', len(res))
    taskChoice()

#### Задание 7.26
def task_26():

    #В алфавите языке племени «тумба-юмба» четыре буквы:
    #«Ы», «Ш», «Ч» и «О». Нужно вывести на экран все
    #возможные слова, состоящие из K букв, в которых есть по
    #крайней мере две одинаковые буквы, стоящие рядом.
    #Подсчитайте количество таких слов.
    #Программа не должна строить другие слова, не
    #соответствующие условию

    print("Тут что-то должно быть ¯\_(ツ)_/¯")
    taskChoice()

#### Задание 7.27
def task_27():

    #В алфавите языке племени «тумба-юмба» четыре буквы:
    #«Ы», «Ш», «Ч» и «О». Нужно вывести на экран все
    #возможные слова, состоящие из K букв, в которых есть по
    #крайней мере две одинаковые буквы, не обязательно
    #стоящие рядом.
    #Программа не должна строить другие слова, не
    #соответствующие условию.

    print("Тут что-то должно быть ¯\_(ツ)_/¯")
    taskChoice()

#### Задание 7.28
def task_28():

    #Вводится 5 строк, в которых сначала записан порядковый
    #номер строки с точкой, а затем – слово. Вывести слова в
    #алфавитном порядке.

    print("\nВведите 5 строк: \n")
    i = 0
    list = []
    for i in range(5):
        print("Введите ", i+1 ," строку: ")
        str = input()
        list.append(str[str.find(".") + 1:])
        i += 1
    list.sort()
    print(list)
    taskChoice()

#### Задание 7.29
def task_29():

    #Вводится несколько строк (не более 20), в которых сначала
    #записан порядковый номер строки с точкой, а затем –
    #слово. Ввод заканчивается пустой строкой. Вывести
    #ведённые слова в обратном алфавитном порядке.

    print("\nВведите строки (не более 20): \n")
    i = 0
    list = []
    for i in range(20):
        print("Введите ", i+1 ," строку: ")
        str = input()
        list.append(str[str.find(".") + 1:])
        i += 1
        if str == '':
            break
    list.sort()
    list.reverse()
    print(list)
    taskChoice()

#### Задание 7.30
def task_30():

    #Вводится несколько строк (не более 20), в которых сначала
    #записаны инициалы и фамилии работников фирмы. Ввод
    #заканчивается пустой строкой. Отсортировать строки в
    #алфавитном порядке по фамилии.

    print("\nВведите инициалы и фамилию: \n")
    i = 0
    list = []
    for i in range(20):
        print("Введите ", i+1 ," строку: ")
        str = input()
        name = str[:str.find(" ")]
        lastName = str[str.find(" ") + 1:]
        list.append(lastName + " " + name)
        i += 1
        if str == '':
            break
    list.sort()
    print(list)
    taskChoice()

#### Функция выбора задания
def taskChoice():
    try:
        taskNumber = int(input("Введите номер задания: "))
        if taskNumber == 1: task_1()
        elif taskNumber == 2: task_2()
        elif taskNumber == 3: task_3()
        elif taskNumber == 4: task_4()
        elif taskNumber == 5: task_5()
        elif taskNumber == 6: task_6()
        elif taskNumber == 7: task_7()
        elif taskNumber == 8: task_8()
        elif taskNumber == 9: task_9()
        elif taskNumber == 10: task_10()
        elif taskNumber == 11: task_11()
        elif taskNumber == 12: task_12()
        elif taskNumber == 13: task_13()
        elif taskNumber == 14: task_14()
        elif taskNumber == 15: task_15()
        elif taskNumber == 16: task_16()
        elif taskNumber == 17: task_17()
        elif taskNumber == 18: task_18()
        elif taskNumber == 19: task_19()
        elif taskNumber == 20: task_20()
        elif taskNumber == 21: task_21()
        elif taskNumber == 22: task_22()
        elif taskNumber == 23: task_23()
        elif taskNumber == 24: task_24()
        elif taskNumber == 25: task_25()
        elif taskNumber == 26: task_26()
        elif taskNumber == 27: task_27()
        elif taskNumber == 28: task_28()
        elif taskNumber == 29: task_29()
        elif taskNumber == 30: task_30()
        else:
            print("\nТакого задания нет. Попробуйте вновь\n")
            taskChoice()
    except ValueError:
        print("\nВведите число.\n")
        taskChoice()
    except KeyboardInterrupt:
        print(" ")

print("\nДля выхода нажмите 'ctrl + c'\n")
taskChoice()
